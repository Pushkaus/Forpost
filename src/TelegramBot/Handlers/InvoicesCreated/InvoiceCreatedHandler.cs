using Forpost.Application.Contracts.CRM.InvoiceManagement.Invoices;
using Forpost.Domain.CRM.InvoiceManagement.Events;
using Forpost.Domain.MessagesManagement.ApplicationNotifications;
using Forpost.Domain.TelegramData;
using Mediator;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace Forpost.TelegramBot.Handlers.InvoicesCreated;
/// <summary>
/// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞
/// </summary>
public sealed class InvoiceCreatedHandler : INotificationHandler<InvoiceCreated>
{
    private readonly IInvoiceReadRepository _invoiceReadRepository;
    private readonly ITelegramUserAuthDomainRepository _userAuthDomainRepository;
    private readonly IApplicationUserNotificationDomainRepository _applicationUserNotificationDomainRepository;
    private readonly ITelegramBotClient _botClient;

    public InvoiceCreatedHandler(
        IInvoiceReadRepository invoiceReadRepository,
        ITelegramUserAuthDomainRepository userAuthDomainRepository,
        IApplicationUserNotificationDomainRepository applicationUserNotificationDomainRepository,
        ITelegramBotClient botClient)
    {
        _invoiceReadRepository = invoiceReadRepository;
        _userAuthDomainRepository = userAuthDomainRepository;
        _applicationUserNotificationDomainRepository = applicationUserNotificationDomainRepository;
        _botClient = botClient;
    }

    public async ValueTask Handle(InvoiceCreated notification, CancellationToken cancellationToken)
    {
        var invoice = await _invoiceReadRepository.GetByIdAsync(notification.InvoiceId, cancellationToken);

        var paymentStatusTranslation = InvoiceEnumTranslations.PaymentStatusTranslations[invoice.PaymentStatus.Name];
        var priorityTranslation = InvoiceEnumTranslations.PriorityTranslations[invoice.Priority.Name];

        var messageText = $"üìÑ *–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å—á–µ—Ç!*\n\n" +
                          $"*–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:* {invoice.Number}\n" +
                          $"*–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç:* {invoice.ContragentName}\n" +
                          $"*–û–ø–∏—Å–∞–Ω–∏–µ:* {invoice.Description ?? "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}\n" +
                          $"*–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—á–µ—Ç–∞:* {invoice.PaymentDeadline?.ToString("dd.MM.yyyy") ?? "–ù–µ —É–∫–∞–∑–∞–Ω"}\n" +
                          $"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priorityTranslation}\n" +
                          $"*–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:* {paymentStatusTranslation}\n";

        var userNotifications = await _applicationUserNotificationDomainRepository
            .GetAlldByNotificationName(nameof(InvoiceCreated), cancellationToken);
        
        
        foreach (var userNotification in userNotifications)
        {
            var telegramAuthUser = await _userAuthDomainRepository
                .GetByUserIdAsync(userNotification.UserId, cancellationToken);

            if (telegramAuthUser != null)
            {
                await _botClient.SendTextMessageAsync(
                    telegramAuthUser.TelegramUserId, 
                    messageText, 
                    parseMode: Telegram.Bot.Types.Enums.ParseMode.Markdown, 
                    cancellationToken: cancellationToken);
            }
        }
    }

}